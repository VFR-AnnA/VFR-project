name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Lint
      run: npm run lint
      
    - name: TypeScript Check
      run: npx tsc --noEmit
    
    - name: Build
      run: npm run build
    
    - name: Test
      run: npm run test
    
    - name: Setup Lighthouse CI
      run: npm install -g @lhci/cli@0.13.x
    
    - name: Run Lighthouse CI
      run: |
        npm run build
        npx serve -s out &
        sleep 5
        lhci autorun \
          --collect.url=http://localhost:3000 \
          --collect.settings.preset=desktop \
          --upload.target=temporary-public-storage \
          --assert.preset=lighthouse:recommended \
          --assert.assertions.cumulative-layout-shift=<=0.08 \
          --assert.assertions.interactive-to-next-paint=<=190
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: out/
        retention-days: 7

  deploy:
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop')
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-output
        path: out
    
    - name: Deploy to Vercel (Preview)
      if: github.ref == 'refs/heads/develop'
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
        vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
        github-token: ${{ secrets.GITHUB_TOKEN }}
        vercel-args: '--prod'
    
    - name: Deploy to CloudFront (Production)
      if: github.ref == 'refs/heads/main'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: eu-west-1
    
    - name: Upload to S3 and invalidate CloudFront
      if: github.ref == 'refs/heads/main'
      run: |
        aws s3 sync out/ s3://${{ secrets.AWS_S3_BUCKET }} --delete
        aws cloudfront create-invalidation --distribution-id ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }} --paths "/*"

  monitor-alerts:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Check performance alerts
      run: |
        # This would be a script to check the monitoring service for alerts
        # For example, querying Datadog, Sentry, or Logflare for CLS > 0.10 or INP > 250ms
        echo "Checking for performance alerts..."
        # npm run check-performance-alerts
    
    - name: Send notification if alerts found
      if: failure()
      uses: slackapi/slack-github-action@v1
      with:
        payload: |
          {
            "text": "⚠️ Performance alert detected in production! CLS > 0.10 or INP > 250ms",
            "blocks": [
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "⚠️ *Performance alert detected in production!*\n\nOne or more Web Vitals metrics have exceeded thresholds:\n• CLS > 0.10\n• INP > 250ms"
                }
              },
              {
                "type": "section",
                "text": {
                  "type": "mrkdwn",
                  "text": "Check the <https://dashboard.example.com|monitoring dashboard> for details."
                }
              }
            ]
          }
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK